    <div id="impress">
      <div class="no-support-message">
        Your browser doesn't support impress.js.  Try Chrome or Safari.
      </div>

      <!-- #1-->
      <div class="step" data-x="-300" data-y="0">
        Push your right arrow key and be zen.
      </div>

      <!-- 2 -->
      <div class="step" data-x="600" data-y="-1200" data-rotate-x="30" data-rotate-y="60" data-rotate-z="90" data-scale="1">
        <h3>
          Zen Programming
        </h3>
        <div class="whiteborder" >
          Jonny Kang @zenjonny
        </div>
      </div>

      <!-- 3 -->
       <div class="step" data-x="5500" data-y="5500" data-rotate-x="0" data-rotate-y="0" data-rotate-z="0" data-scale="15">
        <h3>
          A wired, distracted world
        </h3>
      </div>

     <div class="step" data-x="10500" data-y="15500" data-rotate-x="0" data-rotate-y="90" data-rotate-z="0" data-scale="15">
        <div class="whiteborder small">
          First step, Focus
       </div>
      </div>

     <div class="step" data-x="10500" data-y="15500" data-rotate-x="0" data-rotate-y="180" data-rotate-z="0" data-scale="15">
        <div class="whiteborder small">
          <img src="http://macromeme.com/cat/calm-down-bro-lemur.jpg">
       </div>
      </div>

      <div class="step" data-x="5500" data-y="5500" data-rotate-x="90" data-rotate-y="180" data-rotate-z="90" data-scale="15">
        <div class="whiteborder small">
          Sleep when you sleep.
        </div>
        <div class="whiteborder small">
          Code when you code.
        </div>
        <div class="whiteborder small">
          Work when you work.
        </div>
      </div>

      <div class="step" data-x="5500" data-y="-4000" data-rotate-x="0" data-rotate-y="90" data-rotate-z="0" data-scale="15">
        <h3>
          Second step, Clear your mind
        </h3>
        <p>
        <img src='http://media.tumblr.com/tumblr_m4f3vyj2fc1rnoz2p.jpg'>
        </p>
      </div>

      <div class="step" data-x="15000" data-y="51500" data-rotate-x="0" data-rotate-y="90" data-rotate-z="0" data-scale="15">
        <h3>
          Turn off social media
        </h3>
      </div>

      <div class="step" data-x="-15000" data-y="-8500" data-rotate-x="180" data-rotate-y="0" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          60-120 minutes of pure coding.
        </div>
      </div>

      <div class="step" data-x="-15000" data-y="-8500" data-rotate-x="180" data-rotate-y="90" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Short breaks (meta break)
        </div>
      </div>

     <div class="step" data-x="-15000" data-y="-25500" data-rotate-x="180" data-rotate-y="90" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Don't multitask
        </div>
      </div>

      <div class="step" data-x="30000" data-y="28500" data-rotate-x="90" data-rotate-y="180" data-rotate-z="-90" data-scale="20">
        <h3>
          Zen work-flow
        </h3>
        <p class="details">
          (Task 1 – Task 2) – Break – (Task 2 – Task 3 – Task 4) – Break.
        </p>
      </div>

      <div class="step" data-x="30000" data-y="28500" data-rotate-x="180" data-rotate-y="180" data-rotate-z="-90" data-scale="20">
        <h3>
          Chaotic work-flow
        </h3>
        <p class="details">
          Task 1 – Email – Task 1 – Facebook – Task 1 – Task 2 – Minibreak – Twitter – Task 2 – Hackernews – Email – Task 3 – Email – Break – Task 2 – Email – Task 3 – Twitter – Hacker News
        </p>
      </div>

     <div class="step" data-x="-58000" data-y="-15500" data-rotate-x="90" data-rotate-y="0" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Keep a beginner's mind.
        </div>
      </div>

     <div class="step" data-x="-30000" data-y="-20500" data-rotate-x="180" data-rotate-y="180" data-rotate-z="180" data-scale="10">
        <div class="whiteborder">
          Learn to <b>focus</b> better
          <br>
          to <b>code</b> better.
        </div>
      </div>

      <div class="step" data-x="-35000" data-y="18500" data-rotate-x="180" data-rotate-y="0" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Less code that does more.
        </div>
      </div>

      <div class="step" data-x="-50000" data-y="18500" data-rotate-x="180" data-rotate-y="0" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Testing helps
          <br>
          Zen-driven developement
        </div>
      </div>

      <div class="step" data-x="-65000" data-y="18500" data-rotate-x="180" data-rotate-y="0" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Quit your job
          <br>
          if you're not happy
        </div>
      </div>

      <div class="step" data-x="-80000" data-y="18500" data-rotate-x="180" data-rotate-y="0" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Practice, stay humble, and be happy
        </div>
      </div>

      <div class="step" data-x="-100000" data-y="18500" data-rotate-x="180" data-rotate-y="0" data-rotate-z="0" data-scale="10">
        <div class="whiteborder">
          Save time down the road.
        </div>
      </div>

      <!-- 19 -->
      <div class="step" data-x="-110000" data-y="-20500" data-rotate-x="180" data-rotate-y="90" data-rotate-z="0" data-scale="1">
        <h3>
          Thank you, be zen.
        </h3>
        <%= image_tag 'meditate-beach.jpg', width: 1000 %>
      </div>


      <!-- secret slide-->
      <div class="step" data-x="-15000" data-y="10000" data-rotate-x="30" data-rotate-y="30" data-rotate-z="30" data-scale="120">
      </div>

    </div>

<script>
/**
 * impress.js
 *
 * impress.js is a presentation tool based on the power of CSS3 transforms and transitions
 * in modern browsers and inspired by the idea behind prezi.com.
 *
 * MIT Licensed.
 *
 * Copyright 2011 Bartek Szopka (@bartaz)
 */

(function ( document, window ) {

    // HELPER FUNCTIONS
    
    var pfx = (function () {

        var style = document.createElement('dummy').style,
            prefixes = 'Webkit Moz O ms Khtml'.split(' '),
            memory = {};
            
        return function ( prop ) {
            if ( typeof memory[ prop ] === "undefined" ) {

                var ucProp  = prop.charAt(0).toUpperCase() + prop.substr(1),
                    props   = (prop + ' ' + prefixes.join(ucProp + ' ') + ucProp).split(' ');

                memory[ prop ] = null;
                for ( var i in props ) {
                    if ( style[ props[i] ] !== undefined ) {
                        memory[ prop ] = props[i];
                        break;
                    }
                }

            }

            return memory[ prop ];
        }

    })();

    var arrayify = function ( a ) {
        return [].slice.call( a );
    };
    
    var css = function ( el, props ) {
        var key, pkey;
        for ( key in props ) {
            if ( props.hasOwnProperty(key) ) {
                pkey = pfx(key);
                if ( pkey != null ) {
                    el.style[pkey] = props[key];
                }
            }
        }
        return el;
    }
    
    var byId = function ( id ) {
        return document.getElementById(id);
    }
    
    var $ = function ( selector, context ) {
        context = context || document;
        return context.querySelector(selector);
    };
    
    var $$ = function ( selector, context ) {
        context = context || document;
        return arrayify( context.querySelectorAll(selector) );
    };
    
    var translate = function ( t ) {
        return " translate3d(" + t.x + "px," + t.y + "px," + t.z + "px) ";
    };
    
    var rotate = function ( r, revert ) {
        var rX = " rotateX(" + r.x + "deg) ",
            rY = " rotateY(" + r.y + "deg) ",
            rZ = " rotateZ(" + r.z + "deg) ";
        
        return revert ? rZ+rY+rX : rX+rY+rZ;
    };
    
    var scale = function ( s ) {
        return " scaleX(" + s.x + ") scaleY(" + s.y + ") scaleZ(" + s.z + ") ";
    }
    
    // CHECK SUPPORT
    
    var ua = navigator.userAgent.toLowerCase();
    var impressSupported = ( pfx("perspective") != null ) &&
                           ( ua.search(/(iphone)|(ipod)|(ipad)|(android)/) == -1 );
    
    // DOM ELEMENTS
    
    var impress = byId("impress");
    
    if (!impressSupported) {
        impress.className = "impress-not-supported";
        return;
    } else {
        impress.className = "";
    }
    
    var canvas = document.createElement("div");
    canvas.className = "canvas";
    
    arrayify( impress.childNodes ).forEach(function ( el ) {
        canvas.appendChild( el );
    });
    impress.appendChild(canvas);
    
    var steps = $$(".step", impress);
    
    // SETUP
    // set initial values and defaults
    
    document.documentElement.style.height = "100%";
    
    css(document.body, {
        height: "100%",
        overflow: "hidden"
    });

    var props = {
        position: "absolute",
        transformOrigin: "top left",
        transition: "all 1s ease-in-out",
        transformStyle: "preserve-3d"
    }
    
    css(impress, props);
    css(impress, {
        top: "50%",
        left: "50%",
        perspective: "1000px"
    });
    css(canvas, props);
    
    var current = {
        translate: { x: 0, y: 0, z: 0 },
        rotate:    { x: 0, y: 0, z: 0 },
        scale:     { x: 1, y: 1, z: 1 }
    };

    steps.forEach(function ( el, idx ) {
        var data = el.dataset,
            step = {
                translate: {
                    x: data.x || 0,
                    y: data.y || 0,
                    z: data.z || 0
                },
                rotate: {
                    x: data.rotateX || 0,
                    y: data.rotateY || 0,
                    z: data.rotateZ || data.rotate || 0
                },
                scale: {
                    x: data.scaleX || data.scale || 1,
                    y: data.scaleY || data.scale || 1,
                    z: data.scaleZ || 1
                }
            };
        
        el.stepData = step;
        
        if ( !el.id ) {
            el.id = "step-" + (idx + 1);
        }
        
        css(el, {
            position: "absolute",
            transform: "translate(-50%,-50%)" +
                       translate(step.translate) +
                       rotate(step.rotate) +
                       scale(step.scale),
            transformStyle: "preserve-3d"
        });
        
    });

    // making given step active

    var active = null;
    
    var select = function ( el ) {
        if ( !el || !el.stepData ) {
            // selected element is not defined as step
            return false;
        }
        
        // Sometimes it's possible to trigger focus on first link with some keyboard action.
        // Browser in such a case tries to scroll the page to make this element visible
        // (even that body overflow is set to hidden) and it breaks our careful positioning.
        //
        // So, as a lousy (and lazy) workaround we will make the page scroll back to the top
        // whenever slide is selected
        //
        // If you are reading this and know any better way to handle it, I'll be glad to hear about it!
        window.scrollTo(0, 0);
        
        var step = el.stepData;
        
        if ( active ) {
            active.classList.remove("active");
        }
        el.classList.add("active");
        
        impress.className = "step-" + el.id;
        
        // `#/step-id` is used instead of `#step-id` to prevent default browser
        // scrolling to element in hash
        window.location.hash = "#/" + el.id;
        
        var target = {
            rotate: {
                x: -parseInt(step.rotate.x, 10),
                y: -parseInt(step.rotate.y, 10),
                z: -parseInt(step.rotate.z, 10)
            },
            scale: {
                x: 1 / parseFloat(step.scale.x),
                y: 1 / parseFloat(step.scale.y),
                z: 1 / parseFloat(step.scale.z)
            },
            translate: {
                x: -step.translate.x,
                y: -step.translate.y,
                z: -step.translate.z
            }
        };
        
        var zoomin = target.scale.x >= current.scale.x;
        
        css(impress, {
            // to keep the perspective look similar for different scales
            // we need to 'scale' the perspective, too
            perspective: step.scale.x * 1000 + "px",
            transform: scale(target.scale),
            transitionDelay: (zoomin ? "500ms" : "0ms")
        });
        
        css(canvas, {
            transform: rotate(target.rotate, true) + translate(target.translate),
            transitionDelay: (zoomin ? "0ms" : "500ms")
        });
        
        current = target;
        active = el;
        
        return el;
    }
    
    // EVENTS
    
    document.addEventListener("keydown", function ( event ) {
        if ( event.keyCode == 9 || ( event.keyCode >= 32 && event.keyCode <= 34 ) || (event.keyCode >= 37 && event.keyCode <= 40) ) {
            var next = active;
            switch( event.keyCode ) {
                case 33: ; // pg up
                case 37: ; // left
                case 38:   // up
                         next = steps.indexOf( active ) - 1;
                         next = next >= 0 ? steps[ next ] : steps[ steps.length-1 ];
                         break;
                case 9:  ; // tab
                case 32: ; // space
                case 34: ; // pg down
                case 39: ; // right
                case 40:   // down
                         next = steps.indexOf( active ) + 1;
                         next = next < steps.length ? steps[ next ] : steps[ 0 ];
                         break; 
            }
            
            select(next);
            
            event.preventDefault();
        }
    }, false);

    document.addEventListener("click", function ( event ) {
        // event delegation with "bubbling"
        // check if event target (or any of its parents is a link or a step)
        var target = event.target;
        while ( (target.tagName != "A") &&
                (!target.stepData) &&
                (target != document.body) ) {
            target = target.parentNode;
        }
        
        if ( target.tagName == "A" ) {
            var href = target.getAttribute("href");
            
            // if it's a link to presentation step, target this step
            if ( href && href[0] == '#' ) {
                target = byId( href.slice(1) );
            }
        }
        
        if ( select(target) ) {
            event.preventDefault();
        }
    });
    
    var getElementFromUrl = function () {
        // get id from url # by removing `#` or `#/` from the beginning,
        // so both "fallback" `#slide-id` and "enhanced" `#/slide-id` will work
        return byId( window.location.hash.replace(/^#\/?/,"") );
    }
    
    window.addEventListener("hashchange", function () {
        select( getElementFromUrl() );
    }, false);
    
    // START 
    // by selecting step defined in url or first step of the presentation
    select(getElementFromUrl() || steps[0]);

            })(document, window);
</script>
